(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{387:function(n,t,a){"use strict";a.r(t);var s=a(46),e=Object(s.a)({},(function(){var n=this,t=n.$createElement,a=n._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[a("ul",[a("li",[n._v("os系统：linux")]),n._v(" "),a("li",[a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v("常用名称\n")])])])]),n._v(" "),a("li",[a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v("配置环境变量\n")])])])]),n._v(" "),a("li",[a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v("防火墙、网络\n")])])])]),n._v(" "),a("li",[a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v("linux性能分析命令\n")])])])])]),n._v(" "),a("h3",{attrs:{id:"python基础"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#python基础"}},[n._v("#")]),n._v(" python基础")]),n._v(" "),a("ul",[a("li",[n._v("python解释器")]),n._v(" "),a("li",[n._v("cpu、内存、硬盘\n"),a("ul",[a("li",[n._v("cpu：只负责计算")]),n._v(" "),a("li",[n._v("内存：只负责数据临时存储")]),n._v(" "),a("li",[n._v("硬盘：只负责数据存储（永久）")]),n._v(" "),a("li",[n._v("硬盘提供数据->临时存到内存->cpu负责计算->计算结果存到内存->保存到硬盘")])])]),n._v(" "),a("li",[n._v("变量名 变量值 内存地址\n"),a("ul",[a("li",[a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code")])])])]),n._v('\nname = "charles"\nid(name)')])]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('    * 先定义，后调用\n    * 程序全局都会用到的变量，尽量定义在文件开头\n    * 变量名只能是字母、数字或下划线的任意组合，其它形式均不合法\n    * 变量名的第一个字符不能是数字\n* 字符串\n    * 拼接，大小写切换，增加缩减\n    * count()统计数量\n    * endswith判断结尾\n    * find（）按字符查找，返回-1代表没有找到，如果找到了，就返回所查字符的索引\n    * "".join()拼接字符串\n    * a.replace("l","m",1)字符串替换\n    * a.split("l",1) 字符串分割\n* 列表\n    * 列表切片list[:n]\n    * list[0::n]步长\n    * list.sort()排序\n    * list.reverse()反转，反着排\n    * enumerate（n）索引\n* 字典\n* 元祖相关的操作\n* pycharm操作\n    * ctrl+D复制\n    * ctrl+？注释\n* 循环for\n    * continue 跳过本次循环，进行下一次\n    * break 结束当前循环\n* end="\\n"\n```random.choice([1,3,2,5,9])#随机1个\nrandom.randint(1,100)#随机1个数\ns = [1,3,4,5,7,9,8,0]\nprint(random.sample(s,3))#随机3个\nprint("".join(["a","b","c"]))#合并列表中的元素\nprint(string.ascii_letters)#随机字母\n')])])]),a("ul",[a("li",[n._v("解码\n"),a("ul",[a("li",[n._v("先解码后再编码 gbk->unicode->utf-8")])])])]),n._v(" "),a("h2",{attrs:{id:"python文件操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#python文件操作"}},[n._v("#")]),n._v(" python文件操作")]),n._v(" "),a("p",[n._v('f = open(filename,mode="r")\nf.write()写操作\nf.read()读操作，读出所有内容\nf.readline()读一行\nf.readlines()读取内容，以列表的形式展示出来，每一行当成一个元素\nf.close()保存并关闭\nprint(f.read())')]),n._v(" "),a("p",[n._v("文件打开模式\nr只读\nw创建，若文件已存在，则覆盖旧文件\na追加模式，新数据会写到文件末尾\nf.write()")]),n._v(" "),a("p",[n._v("图片属于二进制文件，使用rb读，wb写\n“r+” 读写的时候，读完光标会到末尾，写之前，需要把光标定位到想写的地方")]),n._v(" "),a("p",[n._v("关键参数必须放在位置参数后面")]),n._v(" "),a("h2",{attrs:{id:"非固定参数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#非固定参数"}},[n._v("#")]),n._v(" 非固定参数")]),n._v(" "),a("p",[n._v('def stu_register(name,age,*args,**kwargs): #*arge 会把多传入的参数变成一个元祖形式；*kwargs 会把多传人的关键字和参数，变成一个字典的形式\nprint(name,age,args,kwargs)\nstu_register("alex",22,"m","girl",1133,addr="好客山东",hometown="曹县")\nreturn\n1.返回执行结果\n2.程序执行，一遇到return，就代表着函数的结束')]),n._v(" "),a("p",[n._v("全局变量，局部变量\n在函数中定义的变量称为局部变量，在程序的一开始定义的变量称为全局变量\n全局变量作用域（即有效范围）是整个程序，局部变量作用域是定义该变量的函数\n变量的查找顺序是局部变量>全局变量\n当全局变量与局部变量重名，先找函数内的局部变量，再找外面的全局变量\n在函数里是不能直接修改全局变量的，除非使用“global name” *不建议使用")]),n._v(" "),a("p",[n._v("函数传递列表，字典产生的现象")]),n._v(" "),a("p",[n._v("dir 打印当前所有程序的变量名\nlocals 打印当前程序的所有变量名，及变量值，字典形式\nfilter,把列表里的每个元素交给第一个参数（函数）运行，若结果为真则返回")]),n._v(" "),a("h3",{attrs:{id:"自定义模块"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自定义模块"}},[n._v("#")]),n._v(" 自定义模块")]),n._v(" "),a("p",[n._v("自定义模块，想让在任意一个地方导入，可以这样\nprint("),a("strong",[n._v("file")]),n._v(") 打印当前脚本文件路径\nos.path.dirname(）去掉当前层级，保留上一级")]),n._v(" "),a("ul",[a("li",[a("p",[n._v("静态\nd6path = ‘/user/alex/documents/work/pyprojects/pydays\nsys.path.append(d6path)")])]),n._v(" "),a("li",[a("p",[n._v("动态")])]),n._v(" "),a("li",[a("p",[n._v("bath_path = print(os.path.dirname(os.path.dirname("),a("strong",[n._v("file")]),n._v(")))")]),n._v(" "),a("p",[a("strong",[n._v("int")]),n._v(".py 调用包的时候，就会执行包下面的int文件，一般用在调用的时候初始化")])])]),n._v(" "),a("p",[n._v('python脚本工作的目录路径：os.getcwd()\n返回指定目录下的所有文件和目录名：os.listdir()\n用来删除一个文件：os.remove()\n删除多个目录：os.removedirs(r"c:\\python)\n检验给出的路径事否是一个文件：os.path.isfile()\n检验给出的路径是否是一个目录：os.path.isdir()\n检验给出的路径是否真的存在：os.path.exists()')]),n._v(" "),a("p",[n._v("获取路径名：os.path.dirname() 当前文件所在路径")]),n._v(" "),a("ul",[a("li",[n._v("获取绝对路径：os.path.abspath()")]),n._v(" "),a("li",[n._v("获取文件名：os.path.basename()")]),n._v(" "),a("li",[n._v("运行shell命令：os.system()")]),n._v(" "),a("li",[n._v('重命名：os.rename("old","new")')]),n._v(" "),a("li",[n._v("创建多级目录：os.makedirs(c\\a\\b)")]),n._v(" "),a("li",[n._v("创建单个目录：os.mkdir(“test”）")]),n._v(" "),a("li",[n._v("获取文件属性：os.stat(file)")]),n._v(" "),a("li",[n._v("获取文件大小：os.path.getsize(filename)")])]),n._v(" "),a("p",[n._v("sys.path 获取系统环境变量\nsys.argv 获取脚本参数")]),n._v(" "),a("p",[n._v("闭包函数\n名字的查找关系是以函数定义阶段为准\n什么事闭包函数\n“闭”封闭的函数，闭函数指的是该函数是内嵌函数\n“包”函数，指的是该函数包含对外层函数作用域名字的引用（不包含全局）\n开放：指的是对拓展功能是开放的\n封闭：指的是对修改源代码是封闭的")]),n._v(" "),a("p",[n._v("option+conmmand+p 展示路径")]),n._v(" "),a("h3",{attrs:{id:"爬虫基本步骤"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#爬虫基本步骤"}},[n._v("#")]),n._v(" 爬虫基本步骤")]),n._v(" "),a("p",[n._v("1.确定目标\n2.发送请求\n3.解析数据\n4.保存数据")]),n._v(" "),a("h3",{attrs:{id:"html常见标签"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#html常见标签"}},[n._v("#")]),n._v(" HTML常见标签")]),n._v(" "),a("p",[n._v('a：超链接\nimg：图片\ninput：输入框，文件上传、按钮\niframe：窗体\nspan、div\n//input[@id="kw]从根路径下查找id为kw的input标签\n//'),a("em",[n._v('[@id"kw"]\n//')]),n._v('[text()="新闻"]\n// 绝对路径，从根目录查找，从html标签开始\ninput 查找元素标签名称，如果是*，表示查找全部的标签\n[] 添加筛选条件，可以但条件，也可以and 多条件\n@ 表示属性（attribute）\ntext（）固定写法，专属于通过text文本来查找元素的筛选条件，text内容完全符合一致才可以\nxpath常用函数：\ncontains：通过模糊查找的行为，查找元素，可以通过属性或者文本作为查找条件\n//input[contains(@id,"kw")]\n//a[contains(text(),"新")]')]),n._v(" "),a("h3",{attrs:{id:"筛选器类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#筛选器类"}},[n._v("#")]),n._v(" 筛选器类")]),n._v(" "),a("p",[n._v('driver.find_element(By.XPATH,\'//a[contains(text(),"新")]\')\nBy.XPATH == "xpath"')]),n._v(" "),a("h3",{attrs:{id:"pytcharm快捷键"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pytcharm快捷键"}},[n._v("#")]),n._v(" pytcharm快捷键")]),n._v(" "),a("p",[n._v("ctrl + R 替换\n补充：Pycharm中查看方法的源码\n方法1、鼠标放在函数上，Ctrl+B，看源码\n方法2、将光标移动至要查看的方法处，按住ctrl 键，点击鼠标左键，即可查看该方法的源码\nopen ./博客\nlsof -i：端口号\nkil -9 pid")]),n._v(" "),a("p",[n._v("计算机网络\ntcp/udp")]),n._v(" "),a("p",[n._v("http协议")])])}),[],!1,null,null,null);t.default=e.exports}}]);