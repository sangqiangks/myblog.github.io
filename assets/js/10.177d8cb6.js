(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{380:function(e,n,a){"use strict";a.r(n);var r=a(46),t=Object(r.a)({},(function(){var e=this,n=e.$createElement,a=e._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"docker"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker"}},[e._v("#")]),e._v(" docker")]),e._v(" "),a("h2",{attrs:{id:"docker安装"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker安装"}},[e._v("#")]),e._v(" docker安装")]),e._v(" "),a("p",[e._v("在Docker官方网站下载安装文件：https://hub.docker.com/editions/community/docker-ce-desktop-mac\n下载 Docker.dmg安装文件，直接双击安装完成就可以了。")]),e._v(" "),a("p",[e._v("登陆自己的Docker账号，可以直接在终端里使用里\n"),a("img",{attrs:{src:"https://pic3.zhimg.com/80/v2-c714b1c386498ba73d1c60fdd4971b46_1440w.jpg",alt:""}}),e._v("\n检查安装成功 docker version")]),e._v(" "),a("p",[e._v("容器和镜像相关命令")]),e._v(" "),a("ul",[a("li",[e._v("docker container run < image name > 创建容器的命令")]),e._v(" "),a("li",[e._v("docker container ls 查看容器信息和状态  -a 详细信息\n"),a("ul",[a("li",[e._v("CONTAINER ID : 容器对应的ID，这个是唯一的")]),e._v(" "),a("li",[e._v("IMAGE : 使用的镜像名称，显示不同")]),e._v(" "),a("li",[e._v("COMMAND : 执行的相关命令")]),e._v(" "),a("li",[e._v("CREATED: 创建的时间")]),e._v(" "),a("li",[e._v("STATUS: 目前镜像的状态，一般会有两种状态Up和Exited.")]),e._v(" "),a("li",[e._v("PORTS: 协议和端口")]),e._v(" "),a("li",[e._v("NAMES: 容器的名称，名字是Docker随机生成的")])])])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("docker container stop <name or ID>  停止容器\ndocker container stop  <ID1  ID2  ID3>  停止多个容器\ndocker container stop $(docker container ps -qa)  停止正在运行的容器\ndocker container rm <name or ID>  删除容器\ndocker container rm <ID or Image Name > -f 强制删除容器\ndocker container run -d -p 80:80 nginx 端口映射\ndocker container logs -f <ID or Image name>  查看后台日志\ndocker exec -it <ID or Image name> sh 进入容器的交互模式\n")])])]),a("p",[e._v("镜像相关命令")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("docker image pull <Image name:版本>\ndocker image ls\ndocker image  inspect <IMAGE ID>  查看具体镜像信息\ndocker image rm <Image ID>\ndocker image save old-name:latest -o new-name.image  导出镜像\ndocker image load -i .\\new-box.image\n")])])]),a("p",[e._v("Dockerfile")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("docker image build -f <file path> -t <Name:tag> . 构建镜像\n -f 指定dockerfile名称\n -t 取名字\ndocker  run imageName  运行镜像\ndocker image tag <old image name > <new iamge name>  修改镜像名称\ndocker login\ndocker image push Name[:TAG]\ndocker image history <Image ID>  查看镜像分层情况\ndocker system prune -f  批量删除容器\ndocker image prune -a  批量删除镜像\ndocker container run -it demo-base\n")])])]),a("p",[e._v("Dockerfile写法")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("FROM ubuntu:latest\nRUN apt-get update && \\\n    apt-get install -y wget && \\\n    wget https://github.com/ipinfo/cli/releases/download/ipinfo-2.0.1/ipinfo_2.0.1_linux_amd64.tar.gz && \\\n    tar zxf ipinfo_2.0.1_linux_amd64.tar.gz && \\\n    mv ipinfo_2.0.1_linux_amd64 /usr/bin/ipinfo && \\\n    rm -rf ipinfo_2.0.1_linux_amd64.tar.gz\n")])])]),a("p",[e._v("CMD和ENV示例")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('FROM ubuntu:latest\nENV VERSION=2.0.1\nRUN apt-get update && \\\n    apt-get install -y wget && \\\n    wget https://github.com/ipinfo/cli/releases/download/ipinfo-${VERSION}/ipinfo_${VERSION}_linux_amd64.tar.gz && \\\n    tar zxf ipinfo_${VERSION}_linux_amd64.tar.gz && \\\n    mv ipinfo_${VERSION}_linux_amd64 /usr/bin/ipinfo && \\\n    rm -rf ipinfo_${VERSION}_linux_amd64.tar.gz\nCMD ["ipinfo","version"]\n')])])]),a("p",[e._v("ENTRYPOINT和CMD结合使用示例")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('FROM ubuntu:21.04\nENTRYPOINT [ "echo"]\nCMD []\ndocker container run --rm -t demo-both "hello world"  \n--rm 容器退出时就能够自动清理容器内部的文件系统\n')])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("docker container exec -it <ContainerID> sh 进入容器交互模式\ndocker container run -it -v ${pwd}:/app node  容器中的app目录和本机当前目录绑定到一起\ndocker container run -d -p 80:80 wordpress  映射端口\n -p 端口映射\ndocker container inspect --format '{{.Config.ExposedPorts}}' <ContainerID>  查看端口\ndocker-compose就是把很多Docker命令写入一个专属的文件docker-compose.yml，然后执行这个文件，就可以直接启动我们想要的容器\n -p就是做端口映射 80:80 服务器端口：容器端口 -d 后台运行 -it 启动交互模式\ndocker-compose up\ndocker-compose stop\ndocker compose ps\ndocker-compose.yml\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('version: "3.8"\n\nservices: # 容器\n  servicename: # 服务名字，这个名字也是内部 bridge网络可以使用的 DNS name\n    image: # 镜像的名字\n    command: # 可选，如果设置，则会覆盖默认镜像里的 CMD命令\n    environment: # 可选，相当于 docker run里的 --env\n    volumes: # 可选，相当于docker run里的 -v\n    networks: # 可选，相当于 docker run里的 --network\n    ports: # 可选，相当于 docker run里的 -p\n  servicename2:\n\nvolumes: # 可选，相当于 docker volume create\n\nnetworks: # 可选，相当于 docker network create\n')])])]),a("p",[e._v("pull from registry")]),e._v(" "),a("p",[e._v("Dockerfile online")]),e._v(" "),a("p",[e._v("自有文件导入 offline")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("docker image build -f <file path> -t  < Name:tag> .\n - -f 指定dockerfile名称\n - -t 取名字\ndocker image history 镜像id\ndocker system prune -f\n")])])])])}),[],!1,null,null,null);n.default=t.exports}}]);