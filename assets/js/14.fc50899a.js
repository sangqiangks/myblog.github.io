(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{386:function(t,n,s){"use strict";s.r(n);var a=s(46),e=Object(a.a)({},(function(){var t=this,n=t.$createElement,s=t._self._c||n;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"面试相关"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#面试相关"}},[t._v("#")]),t._v(" 面试相关")]),t._v(" "),s("h2",{attrs:{id:"ui自动化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ui自动化"}},[t._v("#")]),t._v(" UI自动化")]),t._v(" "),s("ul",[s("li",[t._v("page object 设计模式")]),t._v(" "),s("li",[t._v("工厂模式")]),t._v(" "),s("li",[t._v("单例模式")]),t._v(" "),s("li",[t._v("模板模式")]),t._v(" "),s("li",[t._v("建造者模式\nhttps://www.bilibili.com/video/BV1K64y1B7Nc?from=search&seid=3257321575107056691&spm_id_from=333.337.0.0")])]),t._v(" "),s("h2",{attrs:{id:"容器docker-and-k8s"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#容器docker-and-k8s"}},[t._v("#")]),t._v(" 容器docker and k8s")]),t._v(" "),s("p",[t._v("k8s的yml 文件\ndockerfile怎么写、怎么构建容器")]),t._v(" "),s("p",[t._v("https://www.bilibili.com/video/BV1xQ4y1k7mu?from=search&seid=9754741349608206538&spm_id_from=333.337.0.0\nhttps://www.bilibili.com/video/BV1754y1J7KA?from=search&seid=13358903656616529611&spm_id_from=333.337.0.0")]),t._v(" "),s("h2",{attrs:{id:"大数据"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#大数据"}},[t._v("#")]),t._v(" 大数据")]),t._v(" "),s("p",[t._v("大数据数据库？habse、hdfs\n大数据组件\nES 相关概念\n-已了解ES命令")]),t._v(" "),s("h2",{attrs:{id:"代码题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#代码题"}},[t._v("#")]),t._v(" 代码题")]),t._v(" "),s("p",[t._v("列表中找重复字符串\n判断字符串驼峰\n字符串压缩\n判断连续的字符串\npython 实现判断一个字符串是否是合法 IP 地址")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("find_string")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# result = t in s")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#print(result)")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("list")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" s "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("list")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    set_list "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("set")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("list")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("len")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("set_list"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("len")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("list")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'不重复'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'重复'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("all_list")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arry"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    result "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("set")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arry"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        result"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" arry"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("count"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" result\n    \n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("all_list")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arry"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("dict")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" key "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" arry"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("dict")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("dict")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("get"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("dict")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h2",{attrs:{id:"服务端测试"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#服务端测试"}},[t._v("#")]),t._v(" 服务端测试")]),t._v(" "),s("h3",{attrs:{id:"mq测试"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#mq测试"}},[t._v("#")]),t._v(" MQ测试")]),t._v(" "),s("h3",{attrs:{id:"接口测试"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#接口测试"}},[t._v("#")]),t._v(" 接口测试")]),t._v(" "),s("h3",{attrs:{id:"性能测试"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#性能测试"}},[t._v("#")]),t._v(" 性能测试")]),t._v(" "),s("h3",{attrs:{id:"mysql"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#mysql"}},[t._v("#")]),t._v(" mysql")]),t._v(" "),s("h3",{attrs:{id:"redis"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#redis"}},[t._v("#")]),t._v(" redis")]),t._v(" "),s("h3",{attrs:{id:"rpc"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#rpc"}},[t._v("#")]),t._v(" rpc")]),t._v(" "),s("h3",{attrs:{id:"dubbo"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dubbo"}},[t._v("#")]),t._v(" dubbo")]),t._v(" "),s("h2",{attrs:{id:"功能测试"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#功能测试"}},[t._v("#")]),t._v(" 功能测试")]),t._v(" "),s("h3",{attrs:{id:"常见测试点考察"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常见测试点考察"}},[t._v("#")]),t._v(" 常见测试点考察")]),t._v(" "),s("h3",{attrs:{id:"通用测试-协议、linux命令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#通用测试-协议、linux命令"}},[t._v("#")]),t._v(" 通用测试-协议、linux命令")]),t._v(" "),s("h2",{attrs:{id:"接口自动化测试"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#接口自动化测试"}},[t._v("#")]),t._v(" 接口自动化测试")]),t._v(" "),s("h2",{attrs:{id:"python相关面试题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#python相关面试题"}},[t._v("#")]),t._v(" python相关面试题")]),t._v(" "),s("p",[t._v("django\n"),s("img",{attrs:{src:"https://testerhome.com/uploads/photo/2021/482d99d1-1ec3-43f8-8033-289b21bde39f.png!large",alt:""}}),t._v("\nredis 存储在内存，高频率读写的，减少性能，\nmognodb 存储在硬盘上的")]),t._v(" "),s("h2",{attrs:{id:"面试题整理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#面试题整理"}},[t._v("#")]),t._v(" 面试题整理")]),t._v(" "),s("h3",{attrs:{id:"算法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#算法"}},[t._v("#")]),t._v(" 算法")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("算法题：第一个只出现一次的字符\nhttps://leetcode-cn.com/problems/di-yi-ge-zhi-chu-xian-yi-ci-de-zi-fu-lcof/")])]),t._v(" "),s("li",[s("p",[t._v("算法题：最长不含重复字符的子字符串\nhttps://leetcode-cn.com/problems/zui-chang-bu-han-zhong-fu-zi-fu-de-zi-zi-fu-chuan-lcof/")])]),t._v(" "),s("li",[s("p",[t._v("sql题： 平均分高于60分的学号\nselect id from 表 group by ID having avg>60\nlimit a,b 后缀两个参数的时候（/"),s("em",[t._v("参数必须是一个整数常量")]),t._v("/），其中a是指记录开始的偏移量,b是指从第a+1条开始，取b条记录。")])])]),t._v(" "),s("p",[t._v("group by 分组求和=相同的求和后分组\nsum  列全部求和\n4. 算法题：自己实现线程安全的ArrayList的add和get方法\n5. 算法题：圆圈中最后剩下的数字\nhttps://leetcode-cn.com/problems/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof/\n6. 算法题：三数之和\nhttps://leetcode-cn.com/problems/3sum/\n7. 代码题：读取A、B两个文件的数据，如果A文件的第二列跟B文件的第二列数据相同，则输出A文件该行的数据到C文件。")]),t._v(" "),s("p",[t._v("基础题")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("ArrayList与LinkedList的区别")])]),t._v(" "),s("li",[s("p",[t._v("HashMap的原理，与ConcurrentHashMap的区别")])]),t._v(" "),s("li",[s("p",[t._v("Http的get与post区别")])]),t._v(" "),s("li",[s("p",[t._v("tcp与udp的区别\n1.链路层（数据链路层/网络接口层）：包括操作系统中的设备驱动程序、计算机中对应的网络接口卡\n2.网络层（互联网层）：处理分组在网络中的活动，比如分组的选路。\n3.运输层：主要为两台主机上的应用提供端到端的通信。\n4.应用层：负责处理特定的应用程序细节。\nTCP 和 UDP 的区别（网络上的知识点）:\n1、TCP 面向连接（如打电话要先拨号建立连接）;UDP 是无连接的，即发送数据之前不需要建立连接\n2、TCP 提供可靠的服务。也就是说，通过 TCP 连接传送的数据，无差错，不丢失，不重复，且按序到达;UDP 尽最大努力交付，即不保证可靠交付\n3、TCP 面向字节流，实际上是 TCP 把数据看成一连串无结构的字节流;UDP 是面向报文的\nUDP 没有拥塞控制，因此网络出现拥塞不会使源主机的发送速率降低（对实时应用很有用，如 IP 电话，实时视频会议等）\n4、每一条 TCP 连接只能是点到点的;UDP 支持一对一，一对多，多对一和多对多的交互通信\n5、TCP 首部开销 20 字节;UDP 的首部开销小，只有 8 个字节\n6、TCP 的逻辑通信信道是全双工的可靠信道，UDP 则是不可靠信道")])]),t._v(" "),s("li",[s("p",[t._v("TCP，三次握手，四次挥手")])]),t._v(" "),s("li",[s("p",[t._v("Dns是域名解析系统，将域名解析成ip地址")])]),t._v(" "),s("li",[s("p",[t._v("sql的左连接和右连接是什么")])]),t._v(" "),s("li",[s("p",[t._v("http状态码\n1xx：指示信息--表示请求已接收，继续处理\n2xx：成功--表示请求已被成功接收、理解、接受\n3xx：重定向--要完成请求必须进行更进一步的操作\n4xx：客户端错误--请求有语法错误或请求无法实现\n5xx：服务器端错误--服务器未能实现合法的请求\n200 OK //客户端请求成功\n400 Bad Request //客户端请求有语法错误，不能被服务器所理解\n401 Unauthorized //请求未经授权，这个状态代码必须和 WWW-Authenticate 报头域一起使用\n403 Forbidden //服务器收到请求，但是拒绝提供服务\n404 Not Found //请求资源不存在，eg：输入了错误的 URL\n500 Internal Server Error //服务器发生不可预期的错误\n503 Server Unavailable //服务器当前不能处理客户端的请求，一段时间后可能恢复正常")])]),t._v(" "),s("li",[s("p",[t._v("get和post的区别\n1.get的请求参数是放在url中，post的请求参数是放在请求体中\n2.get提交的数据有大小限制（浏览器对url有长度限制），post提交数据没有大小限制\n3.get传输快，post传输慢\n4.post比get更安全，get的请求参数是放在url中，一些重要信息会通过url看到")])]),t._v(" "),s("li",[s("p",[t._v("点击url发生了什么\n1.浏览器解析url，获取http请求报文\n2.dns解析域名获取ip地址\n3.tcp三次握手建立链接\n4.从服务端获取数据\n5.tcp四次挥手断开链接\n6.浏览器将服务端数据解析展示")])]),t._v(" "),s("li",[s("p",[t._v("http和https的区别\n1.http未加密，htpps是ssl加密的\n2.http的端口是80，https的端口是443\n3.http不安全，https更安全，采用ssl+http协议构建的加密传输")])])]),t._v(" "),s("h3",{attrs:{id:"算法-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#算法-2"}},[t._v("#")]),t._v(" 算法")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("算法题：第一个只出现一次的字符\nhttps://leetcode-cn.com/problems/di-yi-ge-zhi-chu-xian-yi-ci-de-zi-fu-lcof/")])]),t._v(" "),s("li",[s("p",[t._v("算法题：最长不含重复字符的子字符串\nhttps://leetcode-cn.com/problems/zui-chang-bu-han-zhong-fu-zi-fu-de-zi-zi-fu-chuan-lcof/")])]),t._v(" "),s("li",[s("p",[t._v("sql题： 平均分高于60分的学号")])]),t._v(" "),s("li",[s("p",[t._v("算法题：自己实现线程安全的ArrayList的add和get方法")])]),t._v(" "),s("li",[s("p",[t._v("算法题：圆圈中最后剩下的数字\nhttps://leetcode-cn.com/problems/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof/")])]),t._v(" "),s("li",[s("p",[t._v("算法题：三数之和\nhttps://leetcode-cn.com/problems/3sum/")])]),t._v(" "),s("li",[s("p",[t._v("代码题：读取A、B两个文件的数据，如果A文件的第二列跟B文件的第二列数据相同，则输出A文件该行的数据到C文件。")])])]),t._v(" "),s("p",[t._v("基础题")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("ArrayList与LinkedList的区别")])]),t._v(" "),s("li",[s("p",[t._v("HashMap的原理，与ConcurrentHashMap的区别")])]),t._v(" "),s("li",[s("p",[t._v("Http的get与post区别")])]),t._v(" "),s("li",[s("p",[t._v("tcp与udp的区别\n1.链路层（数据链路层/网络接口层）：包括操作系统中的设备驱动程序、计算机中对应的网络接口卡\n2.网络层（互联网层）：处理分组在网络中的活动，比如分组的选路。\n3.运输层：主要为两台主机上的应用提供端到端的通信。\n4.应用层：负责处理特定的应用程序细节。\nTCP 和 UDP 的区别（网络上的知识点）:\n1、TCP 面向连接（如打电话要先拨号建立连接）;UDP 是无连接的，即发送数据之前不需要建立连接\n2、TCP 提供可靠的服务。也就是说，通过 TCP 连接传送的数据，无差错，不丢失，不重复，且按序到达;UDP 尽最大努力交付，即不保证可靠交付\n3、TCP 面向字节流，实际上是 TCP 把数据看成一连串无结构的字节流;UDP 是面向报文的\nUDP 没有拥塞控制，因此网络出现拥塞不会使源主机的发送速率降低（对实时应用很有用，如 IP 电话，实时视频会议等）\n4、每一条 TCP 连接只能是点到点的;UDP 支持一对一，一对多，多对一和多对多的交互通信\n5、TCP 首部开销 20 字节;UDP 的首部开销小，只有 8 个字节\n6、TCP 的逻辑通信信道是全双工的可靠信道，UDP 则是不可靠信道")])]),t._v(" "),s("li",[s("p",[t._v("TCP，三次握手，四次挥手")])]),t._v(" "),s("li",[s("p",[t._v("Dns是域名解析系统，将域名解析成ip地址")])]),t._v(" "),s("li",[s("p",[t._v("sql的左连接和右连接是什么")])]),t._v(" "),s("li",[s("p",[t._v("http状态码\n1xx：指示信息--表示请求已接收，继续处理\n2xx：成功--表示请求已被成功接收、理解、接受\n3xx：重定向--要完成请求必须进行更进一步的操作\n4xx：客户端错误--请求有语法错误或请求无法实现\n5xx：服务器端错误--服务器未能实现合法的请求\n200 OK //客户端请求成功\n400 Bad Request //客户端请求有语法错误，不能被服务器所理解\n401 Unauthorized //请求未经授权，这个状态代码必须和 WWW-Authenticate 报头域一起使用\n403 Forbidden //服务器收到请求，但是拒绝提供服务\n404 Not Found //请求资源不存在，eg：输入了错误的 URL\n500 Internal Server Error //服务器发生不可预期的错误\n503 Server Unavailable //服务器当前不能处理客户端的请求，一段时间后可能恢复正常")])]),t._v(" "),s("li",[s("p",[t._v("get和post的区别\n1.get的请求参数是放在url中，post的请求参数是放在请求体中\n2.get提交的数据有大小限制（浏览器对url有长度限制），post提交数据没有大小限制\n3.get传输快，post传输慢\n4.post比get更安全，get的请求参数是放在url中，一些重要信息会通过url看到")])]),t._v(" "),s("li",[s("p",[t._v("点击url发生了什么\n1.浏览器解析url，获取http请求报文\n2.dns解析域名获取ip地址\n3.tcp三次握手建立链接\n4.从服务端获取数据\n5.tcp四次挥手断开链接\n6.浏览器将服务端数据解析展示")])]),t._v(" "),s("li",[s("p",[t._v("http和https的区别\n1.http未加密，htpps是ssl加密的\n2.http的端口是80，https的端口是443\n3.http不安全，https更安全，采用ssl+http协议构建的加密传输")])])]),t._v(" "),s("h3",{attrs:{id:"cookie和session的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cookie和session的区别"}},[t._v("#")]),t._v(" cookie和session的区别")]),t._v(" "),s("p",[t._v("1.cookie是保存在浏览器上，session是保存在服务端上\n2.cookie不是很安全，session是安全的\n3.cookie保存数据的数据不能过多\n重要的信息，如登录信息放在session中\n其它等不重要的信息放在cookie中")]),t._v(" "),s("h3",{attrs:{id:"linux"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#linux"}},[t._v("#")]),t._v(" linux")]),t._v(" "),s("p",[t._v("查看当前路径：pwd\nls -l ls -a 查看文件，展示权限属性，展示隐藏文件\nfin -name 文件： 找匹配文件名\ncat 展示文件全部内容\nhead 文件名，查看头部，还可以指定行数\ndf -hl ： 查看磁盘使用空间\nfree :显示系统使用情况\ntop ：显示当前系统中占用资源最多的一些进程\ngrep ‘test’a,b,c 在文件 a,b,c 中寻找 test 这个词\ngrep -r 'test' . # 在当前目录中找 test 这个词\nbin 可执行的二进制文件\nlib 库文件")]),t._v(" "),s("h3",{attrs:{id:"mysql-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#mysql-2"}},[t._v("#")]),t._v(" MySQL")]),t._v(" "),s("p",[t._v("事务：\n1.原子性： 要么全部完成，要么不完成，若发生错误会进行回滚操作；\n2.一致性： 开始到结束后，数据库完整性约束没收到破坏；（实体完整性，参照完整性，用户定义的完整性）\n3.隔离性： 事务与事务之间相隔离，串行化执行；\n4.持久性： 事务完成对数据的影响是永久的；\n四个隔离:\n1.脏读\n脏读是指在一个事务处理过程里读取了另一个未提交的事务中的数据。\n当一个事务正在多次修改某个数据，而在这个事务中这多次的修改都还未提交，这时一个并发的事务来访问该数据，就会造成两个事务得到的数据不一致。例如：用户 A 向用户 B 转账 100 元，对应 SQL 命令如下\nupdate account set money=money+100 where name=’B’; (此时 A 通知 B)\nupdate account set money=money - 100 where name=’A’;\n当只执行第一条 SQL 时，A 通知 B 查看账户，B 发现确实钱已到账（此时即发生了脏读），而之后无论第二条 SQL 是否执行，只要该事务不提交，则所有操作都将回滚，那么当 B 以后再次查看账户时就会发现钱其实并没有转。\n2.不可重复读\n不可重复读是指在对于数据库中的某个数据，一个事务范围内多次查询却返回了不同的数据值，这是由于在查询间隔，被另一个事务修改并提交了\n3.虚读 (幻读)\n幻读是事务非独立执行时发生的一种现象。例如事务 T1 对一个表中所有的行的某个数据项做了从 “1” 修改为 “2” 的操作，这时事务 T2 又对这个表中插入了一行数据项，而这个数据项的数值还是为 “1” 并且提交给数据库。而操作事务 T1 的用户如果再查看刚刚修改的数据，会发现还有一行没有修改，其实这行是从事务 T2 中添加的，就好像产生幻觉一样，这就是发生了幻读\nSerializable (串行化)：可避免脏读、不可重复读、幻读的发生。\nRepeatable read (可重复读)：可避免脏读、不可重复读的发生。\nRead committed (读已提交)：可避免脏读的发生。\nRead uncommitted (读未提交)：最低级别，任何情况都无法保证。\n四种隔离级别最高的是 Serializable 级别，最低的是 Read uncommitted 级别，级别越高，执行效率就越低。\n主键，外键：\n主键 ：对表中数据进行唯一标识的数据列的组合；不能缺失；不能空值；\n外键 ：该列为另一表的主键\n索引:\n1.数据库索引，是数据库管理系统中一个排序的数据结构，以协助快速查询、更新数据库表中数据。索引的实现通常使用 B 树及其变种 B+ 树\n2.通过创建唯一性索引，可以保证数据库表中每一行数据的唯一性\nCREATE INDEX index_name ON table_name(username(length));\n建立索引的缺陷:\n1.虽然索引大大提高了查询速度，同时却会降低更新表的速度，如对表进行 INSERT,UPDATE 和 DELETE。因为更新表时，mysql 不仅要保存数据，还要保存一下索引文件\n2.建立索引会占用磁盘空间的索引文件。一般情况这个问题不太严重，但如果你在要给大表上建了多种组合索引，索引文件会膨胀很宽\ndrop,delete 与 truncate 的区别\ndrop 直接删掉表 truncate 删除表中数据，再插入时自增长 id 又从 1 开始 delete 删除表中数据，可以加 where 字句\n一般而言，drop > truncate > delete\n连接种类,区别:\nInner join,left join,right join,full join\n分库分表:\n数据库引擎:myisam 和 innodb,前者比较适合大量 select,事务不安全;后者支持外键,事务安全,,适合大量 update,insert\nsql注入")]),t._v(" "),s("h3",{attrs:{id:"jmeter"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jmeter"}},[t._v("#")]),t._v(" jmeter")]),t._v(" "),s("p",[t._v("1.性能测试几个概念\nTPS：每秒钟 request/事务 数量\n并发数： 系统同时处理的 request/事务数\n响应时间： 一般取平均响应时间\n下面几个概念可以看看\n负载测试（Load Test）：负载测试是一种性能测试，指数据在超负荷环境中运行，程序是否能够承担 (通俗讲我觉得就是到了拐点就停了，再往上指标也不会上涨)\n压力测试（Stress Test）： 压力测试（又叫强度测试）也是一种性能测试，它在系统资源特别低的情况下软件系统运行情况，目的是找到系统在哪里失效以及如何失效的地方。\n(1) 稳定性压力测试：在选定的压力值下，长时间持续运行。通过这类压力测试，可以考察各项性能指标是否在指定范围内，有无内存泄漏、有无功能性故障等；\n(2) 破坏性压力测试：在稳定性压力测试中可能会出现一些问题，如系统性能明显降低，但很难暴露出其真实的原因。通过破坏性不断加压的手段，往往能快速造成系统的崩溃或让问题明显的暴露出来\n极限测试 Extreme testing：在过量用户下的负载测试 Hammer testing：连续执行所有能做的操作\n像一般性能测试可能会发现数据库连接上的错误，代码的异常，也有可能是 jmeter 自身这个软件有性能瓶颈\nJmeter-plugins-manager(一个插件)\n下载之后放到 lib/ext 下面,重启,然后就如图\nalt 文本")]),t._v(" "),s("p",[t._v("1.其中 Transaction per Second 就是 tps 图，Response Time Over Time 就是平均响应时间,方便实时观察，而不是最后看查看结果树\n2.一般短的压测都是相同条件压三次取平均值\n3.一般很少会直接压线上，所以会有一个线上和测试的机器参数对比，有一个倍数关系，测试环境做完压测后再计算大概线上的结果\n怎么确定性能指标?\n1.互联网上对于用户响应时间，有一个普遍的标准，2－5－10 原则\n2.1.5 倍峰值作为参考 + 服务器 (内存,CPU 等等)\njmeter 怎么用上一个接口的结果作为下一个接口的参数 (使用 Json extractor)-加分点")]),t._v(" "),s("h3",{attrs:{id:"性能检测工具"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#性能检测工具"}},[t._v("#")]),t._v(" 性能检测工具")]),t._v(" "),s("h3",{attrs:{id:"git"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git"}},[t._v("#")]),t._v(" git")]),t._v(" "),s("p",[t._v("简单命令\ngit clone\ngit status 查看仓库状态\ngit diff * 查看 X 文件修改了那些内容")]),t._v(" "),s("p",[t._v('git log 查看历史记录\ngit reset –hard HEAD^ 回退到上一个版本\ngit reset --hard HEAD~第几个 如果想回退到第 3 个版本，使用 git reset –hard HEAD~3\ngit branch 查看本地所有的分支\ngit branch -a 查看远程所有的分支\ngit branch name 创建分支\ngit branch –d dev 删除 dev 分支\ngit checkout –b dev 创建 dev 分支 并切换到 dev 分支上\ngit merge dev 在当前分支上合并 dev 分支代\n提交代码三部曲哈哈哈:\ngit add * 把 x 文件添加到暂存区去\ngit commit –m "*" 提交文件 –m 后面的是注释\ngit push')]),t._v(" "),s("h3",{attrs:{id:"基础测试"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基础测试"}},[t._v("#")]),t._v(" 基础测试")]),t._v(" "),s("p",[t._v("web和APP测试区别\n1.兼容\n2.性能上,比如电量,内存,CPU\n3.健壮性,专项测试,比如中断,来电,短信,关机,弱网\n4.因为 web 是基于浏览器的，app 是基于客户端的，所以要考虑 app 的安装,更新,卸载\n5.app 的触摸\n6.自动化,web 多为 selenium,app 多为 appium\n安卓和ios测试区别\n1 . Android 长按 home 键呼出应用列表和切换应用，然后右滑则终止应用；")]),t._v(" "),s("p",[t._v("多分辨率测试，Android 端 20 多种，ios 较少；\n手机操作系统，Android 较多，ios 较少且不能降级，只能单向升级；新的 ios 系统中的资源库不能完全兼容低版本中的 ios 系统中的应用，低版本 ios 系统中的应用调用了新的资源库，会直接导致闪退（Crash）；\n操作习惯：Android，Back 键是否被重写，测试点击 Back 键后的反馈是否正确；应用数据从内存移动到 SD 卡后能否正常运行等；\npush 测试：Android：点击 home 键，程序后台运行时，此时接收到 push，点击后唤醒应用，此时是否可以正确跳转；ios，点击 home 键关闭程序和屏幕锁屏的情况（红点的显示）；\n安装卸载测试：Android 的下载和安装的平台和工具和渠道比较多，ios 主要有 app store，iTunes 和 testflight 下载；\n升级测试：可以被升级的必要条件：新旧版本具有相同的签名；新旧版本具有相同的包名；有一个标示符区分新旧版本（如版本号），对于 Android 若有内置的应用需检查升级之后内置文件是否匹配（如内置的输入法）")]),t._v(" "),s("h3",{attrs:{id:"客户端性能测试"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#客户端性能测试"}},[t._v("#")]),t._v(" 客户端性能测试")]),t._v(" "),s("p",[t._v("性能测试指标\n响应\n内存\ncpu\nFPS\nGPU过度渲染\n耗电\n耗流\nhttps://blog.csdn.net/xiaomaoxiao336368/article/details/83547318\n1、响应 (冷启动即首次启动,热启动为非首次启动)\n冷启动：首次启动 app 的时间间隔（只是启动时间，不包括页面加载）\n热启动：非首次启动 app 的时间间隔（只是启动时间，不包括页面加载）\n方法:adb shell am start -W packageName 或者通过 Android Monitor 的 logcat\n2、内存 测试点一般如下\n空闲状态：切换至后台或者启动后不做任何操作，消耗内存最少。\n中强度状态：时间偏长的操作应用。\n高强度状态：高强度使用应用，可以跑 monkey 来测试（通常用来测试内存泄漏）。\n方法:adb shell dumpsys meminfo packageName\n3、cpu 测试点一般如下\n在空闲时间 (切换至后台) 的消耗，基本没大应用使用 cpu\n在运行一些应用的情况下，cpu 已占 50% 的情况下，观察应用程序占用 cpu 的情况\n在高负荷的情况下看 CPU 的表现（cpu 占用应是在 80% 以上）\n方法: top -m -s cpu |grep packageName(-m 是最大 -s 是排序) 或者 dumpsys cpuinfo |grep packageName\n4、FPS (app 使用的流畅度,60 帧/s，要保持画面流畅不卡顿，一般是要求每一帧的时间不超过 1000/60=16.6ms)\n方法:adb shell dumpsys gfxinfo packageName 或者开发者选项—>profile GPU rendering —> on screen as bars(这个基本不用,了解就行了我感觉)\n5、GPU 过度渲染 (开发者选项—>Debug GPU overdraw—>show overdraw areas)\n6、耗电 测试点一般如下\n测试手机安装目标 APK 前后待机功耗无明显差异；\n常见使用场景中能够正常进入待机，待机电流在正常范围内；\n长时间连续使用应用无异常耗电现象\n方法:adb shell dumpsys batterystats |grep packageName\n7、耗流\n方法:\n先查看 UID:cat /data/system/packages.list | grep com.newsplus.tr 假设 UID 为 1000\n然后 通过 cat /proc/uid_stat/1000/tcp_rcv 计算下行流量\n再启动 APP 到 APP 彻底启动 cat/proc/uid_stat/1000/tcp_sed 计算上行流量\n然后 sed-rcv 即可")]),t._v(" "),s("h3",{attrs:{id:"adb命令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#adb命令"}},[t._v("#")]),t._v(" adb命令")]),t._v(" "),s("p",[t._v("adb devices:查看当前连接的设备（连接计算机的 Android 设备或者模拟器）\nadb install ，将指定的 apk 安装到设备上，安装的 apk 包会放在/data/app 目录下。\n几个参数：\n-r 强制安装\n-d（真机，多个设备中只有一个真机时适用）\n-e（模拟器，多个设备中只有一个模拟器时适用）\n-s（指定设备，后接序列号）\nadb –s 44a188f9 install –r test.apk（其中 44a188f9 即序列号，通过 adb devices 可获取）\nadb reboot:重启 android 设备\nadb shell ps/top:查看当前终端中的进程信息，如 pid 等\nadb shell pm list packages:列出当前设备所有已安装的程序的包名\nadb pull 和 adb push:\nadb pull <设备中的文件路径> <本地路径>:从模拟器或设备中复制文件到本地。\nadb push <本地文件路径> <设备中的路径>:将本地文件或目录复制到模拟器或设备。\nadb logcat >E:/temp/log.txt\n1.自我介绍\n2.你现在的测试流程描述下？\n3.挑一个你最熟悉的项目描述下，说一说你在其中的工作\n4.你认为如何做一个好的测试 (或者说你觉得你做测试比别人的优势在哪)\n5.你印象中测试过程中最大的问题是什么？怎么解决的 (包括线上问题)\n6.工作以来或者未来的规划 (有个规划就好)\n7.什么样的测试用例算是一个好的测试用例 (建议与第一点的黑盒方法结合着说)\n8.一般你都怎么定位 bug\n9.为什么要做自动化测试?或者说和手工测试有什么不同 (https://www.cnblogs.com/test_home_c/p/9399287.html)\n(这个写的挺好,总结其实最主要:回归,提高效率,减少重复工作,能及时报警,更好保证产品质量)\n10.离职原因 (千万不要说前公司的坏话，尽量靠在工作方向说，只要不是一些偏激的我认为都可以)\n11.期望薪资 (要么直接说，要么我觉得就是问之前可以先问问年终是几个月,或者补贴什么的有多少再说自己的期望，具体情况具体分析)\n12.对于加班你怎么看?(加班分两方面,一方面是对于自己来说是成长，同时也会 push 公司业务的增进；第二就是有压力的情况下其实会有动力，也会自己平时有一些解压的方法)\n13.你有什么问题想问我么 (我觉得是一定是要问的,除非确实没啥兴趣或者觉得挂了,先考虑考虑，比如业务相关)\n14.作为测试工程师,怎么保证软件的质量?(怎么做好一个测试)\n(1) 代码质量：开发通过单元测试保证\n(2) 让用户参与 UAT 测试，保证用户体验（使用质量）\n(3) 功能测试、性能测试、兼容性测试等多种测试类型的结合\n(4) 采用合适的用例方法，如何进行需求分析，用例评审\n(5) 要有把控全局的能力 (推动客户端和 UI,交互的时间,推动研发提测时间，提测质量；比如说研发提测质量低，那我们可以制定冒烟测试标准,且让他们在测试环境联调)")]),t._v(" "),s("p",[t._v("(6) 要有好的沟通能力和责任心")]),t._v(" "),s("p",[t._v("15.开发坚持说这不是一个问题怎么办?(1.看需求,如果是的话就没什么说的 2.如果坚持,尽量重现,三方讨论)\n16.紧急需求怎么办?(一般拿出来看优先级,如果是重要且紧急的那种,那就紧急发布,如果不重要不紧急,看是否可以延后至下个版本；当出现紧急需求的时候,我们要和产品,研发 leader 讨论是否可以在版本原先上线时间的基础上延后,要为自己争取)")]),t._v(" "),s("p",[t._v("给大家剧透一些问题（曾经我遇到过的，一个示例，大家也可以参考，具体的公司我就避免一些意外，不在此透露）:")]),t._v(" "),s("p",[t._v("介绍项目")]),t._v(" "),s("p",[t._v("怎么测一个接口，哪些方式 (我理解是跟用例差不多,协议,url,参数,请求方式,头部信息,返回;然后性能上响应时间,并发,安全上 SQL 注入,权限什么的,提一下就行,反正能多说就说，对方会觉得你知识面广一些)")]),t._v(" "),s("p",[t._v("会问有多少个服务,其实就是站点，大概算下就好了，10 多个吧，然后就问服务端的一个流转（主要是服务的流转性）")]),t._v(" "),s("p",[t._v("Android 和 ios 测试区别 (上面有..1.右滑 2.IOS 版本少一些,一般兼容 4 个系统版本,比如 12,11,10,9，也看具体用户情况 ,android 版本多,分辨率也多 3.home 键,android 能后台运行 4.android 性能没 IOS 好,电量,内存什么的都不如 IOS 其实 5.想到的可以自己补充哦)")]),t._v(" "),s("p",[t._v("测试这个项目的时候比如在用户表插入一条数据，数据库哪些字段会变化 (他的意思是测了一个查询接口,其实我答错了，不过回答的应该是 id,userid,用户名,密码,插入时间,用户状态,权限,针对借款项目的话比如还有绑卡信息什么的)")]),t._v(" "),s("p",[t._v("linux 查看日志的命令 (上面有,less,more,cat,tail,echo.....)")]),t._v(" "),s("p",[t._v("7.遇到过的印象最深的线上问题")]),t._v(" "),s("p",[t._v("8.如果你提到支付，应该会问支付异常 case（数据库，流程尤为关键）")]),t._v(" "),s("p",[t._v("9.对加班怎么看")]),t._v(" "),s("p",[t._v("10.测试用例设计 (购物车)")]),t._v(" "),s("p",[t._v("11.web 和 app 测试的最大区别 (上面有)")]),t._v(" "),s("p",[t._v("12.怎么进行 sql 注入 (我觉得这个还是看下,安全上虽然没做过,不过看过这个在面试过程中会有加分的时候)")]),t._v(" "),s("p",[t._v("13.jmeter 参数化的方法 ( 总结 1.用 jmeter 的用户参数,直接下面的用上面的 2.jmeter 的函数助手,csvread 3.csv_data,这个传参)")]),t._v(" "),s("p",[t._v("14.一周的紧急需求怎么排期能尽量保证上线质量")]),t._v(" "),s("p",[t._v("15.描述最近的工作,项目,你做的什么")]),t._v(" "),s("p",[t._v("16.字符串倒序怎么实现")]),t._v(" "),s("p",[t._v("17.自动化")])])}),[],!1,null,null,null);n.default=e.exports}}]);