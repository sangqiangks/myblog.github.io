(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{395:function(v,n,_){"use strict";_.r(n);var e=_(46),s=Object(e.a)({},(function(){var v=this,n=v.$createElement,_=v._self._c||n;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h2",{attrs:{id:"支付测试用例"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#支付测试用例"}},[v._v("#")]),v._v(" 支付测试用例")]),v._v(" "),_("p",[v._v("ui\n界面文字，没有错别字，不出现遮挡重叠\n图片清晰，动画不卡顿")]),v._v(" "),_("p",[v._v("点击支付->选择支付方式->确认金额->输入密码->成功支付\n1.点击支付，正常跳转页面，唤起支付中台，生成一笔支付记录\n2.点击支付，跳转页面，返回上一界面，或取消，取消成功，并可以重复支付")]),v._v(" "),_("p",[v._v("3.信用卡，储蓄卡，网银，余额，第三方支付，")]),v._v(" "),_("p",[v._v("4.一个订单支付，金额长度，最大值，最小值，特殊符号，是否是人民币\n5.多订单支付，支付金额的正确，支付成功")]),v._v(" "),_("p",[v._v("6.指纹，人脸，密码，验证码，免密支付")]),v._v(" "),_("p",[v._v("7.支付成功，支付记录为支付成功，扣款成功\n8.第三方支付记录为支付成功，扣款成功\n9.商户收到支付金额，订单状态改变为已支付")]),v._v(" "),_("p",[v._v("用户口款成功，收到支付")]),v._v(" "),_("p",[v._v("异常\n没有绑定银行卡，没有余额\n取消支付\n密码错误，一次，多次\n用户银行余额不足或被冻结\n重复支付一笔订单，返回取消\n重复支付多笔订单，是否正常，会不会触发安全警告")]),v._v(" "),_("p",[v._v("弱网\n网络不好的场景下支付")]),v._v(" "),_("p",[v._v("中断\n电话中断，是否可以继续支付\n支付完成中断，未确认支付成功时，刷新请求是是否支付成功")]),v._v(" "),_("p",[v._v("兼容：\n不同设备，系统，机型，分辨率的支付")]),v._v(" "),_("p",[v._v("性能：\n支付占用多大的cpu，内存\n在cpu内存不够时，支付是否可以正常进行，会不会出现app崩溃，支付异常\n多用户同一时间支付，支付成功率为多少，是否过低\n多用户同一时间支付，支付响应时间，是否过长\n多用户同一时间支付，支付失败，是否可以重新继续支付")]),v._v(" "),_("p",[v._v("安全\n支付过程中，被登录挤退\n支付账号中风控，是否引导解除风控方式\n支付环境异常，如不是常用设备，不符合常用习惯，或者支付金额过大，暂时不能支付，并进一步引导\n密码支付错误，一次，多次")]),v._v(" "),_("p",[v._v("点击发送->选择图片->发送->接收\n我->用->水杯->喝水\n装水，喝水")]),v._v(" "),_("p",[v._v("电梯\n按钮->开门->关门->按楼层->到达->开门\n谁->乘坐->电梯")]),v._v(" "),_("h2",{attrs:{id:"mysql"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#mysql"}},[v._v("#")]),v._v(" mysql")]),v._v(" "),_("p",[v._v("mysql架构\n应用层：负责连接客户端，响应客户端请求，返回数据")]),v._v(" "),_("p",[v._v("逻辑层：包括sqk接口，解析器，优化器，cache和buffer")]),v._v(" "),_("p",[v._v("数据库引擎层：innodb和myisam")]),v._v(" "),_("p",[v._v("物理层：文件存储，日志")]),v._v(" "),_("p",[v._v("sql语言执行过程\n1.客户端先进行身份认证和权限相关")]),v._v(" "),_("p",[v._v("2.执行语句会先查询缓存")]),v._v(" "),_("p",[v._v("3.没有命中缓存，sql语句就会经过解析器，分析语句，包括语法检查")]),v._v(" "),_("p",[v._v("4.通过优化器，按照mysql认为嘴优的方案去执行")]),v._v(" "),_("p",[v._v("5.执行语句，从存储引擎返回数据")]),v._v(" "),_("p",[v._v("mysql的共享锁排它锁\n共享锁也称为读锁，多个用户在同一时刻读取同一资源，而且不互相干扰")]),v._v(" "),_("p",[v._v("排它锁也叫写锁，会阻塞其它的写锁和读锁，确保在同一时刻只给一个用户写入并防止其他用户读取这一资源")]),v._v(" "),_("p",[v._v("表级锁：对整张表加锁，加锁快，并发能力低")]),v._v(" "),_("p",[v._v("行锁：锁住某一行，如果表存在索引，记录锁是锁在索引上的，如果表没有索引，innodb会创建一个隐藏的索引加锁。\n优点：行级锁会大大减少数据库操作的冲突，加锁粒度最小，并发度高\n缺点：加锁开销最大，加锁慢，会出现死锁")]),v._v(" "),_("p",[v._v("如何解决死锁")]),v._v(" "),_("ol",[_("li",[v._v("加锁的时，给锁设置顺序，时限")]),v._v(" "),_("li",[v._v("放弃锁的请求，或者给几个线程设置优先级，让几个线程回退，剩下的线程会按照优先级去进行操作")])]),v._v(" "),_("p",[v._v("乐观锁：对于数据库冲突保持一种乐观的态度，操作数据的时候不会加锁，只有提交数据时才去验证数据是否存在冲突")]),v._v(" "),_("p",[v._v("悲观锁：对于数据冲突保持一种悲观的态度，修改数据之前把数据锁住，然后再进行数据读写，在它释放锁之前任何人都不能对其数据进行操作，一般数据库锁是按照悲观锁机制去实现的")]),v._v(" "),_("p",[v._v("innodb支持事务，基于聚簇索引建立的，支持表级锁和行级锁，支持外键，适合数据增删改查频繁的情况\n事务内的语句，要么全部执行成功，要么全部执行失败")]),v._v(" "),_("ul",[_("li",[v._v("原子性：一个事务的所有操作，要么全部完成，要么全部不完成")]),v._v(" "),_("li",[v._v("一致性：事务执行前后数据库状态保存一致")]),v._v(" "),_("li",[v._v("隔离性：多个并发事务对数据库进行操作，之间互不干扰")]),v._v(" "),_("li",[v._v("持久性：事务执行完毕，对数据修改是永久的，系统故障也不会丢失")])]),v._v(" "),_("p",[v._v("索引是一种数据结构，关系型数据库中，索引具体是一种对数据库中一列或多列的值进行排序的存储结构")]),v._v(" "),_("p",[v._v("索引优点：\n提高数据查询的效率，")]),v._v(" "),_("p",[v._v("常见索引\nb-索引 哈希索引 全文索引")]),v._v(" "),_("p",[v._v("简述mysql优化流程")]),v._v(" "),_("ol",[_("li",[v._v("首先通过慢日志定位执行较慢的sql语句")]),v._v(" "),_("li",[v._v("利用explain对这些关键字段进行分析")]),v._v(" "),_("li",[v._v("根据分析结果进行优化")])]),v._v(" "),_("p",[v._v("mysql主从复制")]),v._v(" "),_("p",[v._v("优点：读写分离，提升数据库负载性能，容灾")]),v._v(" "),_("p",[v._v("流程：")]),v._v(" "),_("ol",[_("li",[v._v("事务完成前，主库在binlog上记录这些改变，在binlog完成写入后，主库告知存储引擎提交事务")]),v._v(" "),_("li",[v._v("从库将binlog复制到对应的中继日志，将这些事件写入中继日志")])]),v._v(" "),_("p",[v._v("sql常用语句")]),v._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[v._v("ssh root@8.140.30.22\nmysql -uroot -p\nshow databases;\ncreate database testdb;\ndrop database test;\ndesc testdb;\nuse testdb;\ncreate table book(id int,bookname varchar(1024),size int);\n退出mysql：exit\n导入数据：source 路径\n查看数据库版本号：select verson();\n查看当前数据库：select database();\n\\c 终止一条sql语句的输入\nselect id from 表 group by ID having avg>60\nlimit a,b 后缀两个参数的时候（/*参数必须是一个整数常量*/），其中a是指记录开始的偏移量,b是指从第a+1条开始，取b条记录。\n\ngroup by 分组求和=相同的求和后分组\nsum  列全部求和\ninsert into students(列名）values(值名)\ndelete  from  表名  where  条件\nselect * \nfrom 表名\nwhere 列名 =或者in (select 列名\n\t                  from 表名\n\t\t\t\t\t \t   where 条件)\n\n   左联查：\n   select *\n   from 表1\n\tleft join 表2\n\t     on 表1.列 = 表2.列\n\t left join 表3\n\t   on 表1.列 = 表3.列 或者 表2.列 = 表3.列\nwhere 条件\nupdate 表名\n     set 列名 = 新值\n   where 列名 = 旧值\n\n")])])]),_("p",[v._v("redis\nredis数据类型；string字符串，list列表，hash，set，zset")]),v._v(" "),_("p",[v._v("什么情况下使用redis")]),v._v(" "),_("ol",[_("li",[v._v("针对热点数据进行缓存")]),v._v(" "),_("li",[v._v("针对特定西安市数据存放")]),v._v(" "),_("li",[v._v("分布缓存")])]),v._v(" "),_("p",[v._v("什么数据可以放缓存？")]),v._v(" "),_("ol",[_("li",[v._v("不需要实时更新但是又极其消耗数据库的数据")]),v._v(" "),_("li",[v._v("需要实时更新，但是更新频率不高的数据")]),v._v(" "),_("li",[v._v("某个时刻访问量极大，而且更新很频繁的数据")])]),v._v(" "),_("p",[v._v("什么数据不能放缓存？\n涉及到钱、密匙、业务关键核心数据等")]),v._v(" "),_("p",[v._v("redis和memecache的区别")]),v._v(" "),_("ol",[_("li",[v._v("redis是单线程模型，memecach是多线程异步io")]),v._v(" "),_("li",[v._v("redis支持数据持久化，memecach不支持")]),v._v(" "),_("li",[v._v("redis支持数据格式更多")])]),v._v(" "),_("p",[v._v("redis集群部署模式")]),v._v(" "),_("ol",[_("li",[v._v("主从复制")]),v._v(" "),_("li",[v._v("哨兵模式")])]),v._v(" "),_("p",[v._v("redis常用命令\ndel\nset\nhset\nget\nhget\nlen\nlset\nsadd")]),v._v(" "),_("p",[v._v("redis和mysql的区别\n类型上：mysq是关系型数据库，redis是非关系型数据库\n作用上：mysql用于持久化的存储数据到硬盘，但是速度较慢\nredis用户存储到内存，读取速度快\nredis对内存的要求高\nmysql对内存要求比较高\nmysql偏向于存数据，redis偏向快速取数据")]),v._v(" "),_("p",[v._v("mongodb、mysql、redis\nmysql的更新是直接写入硬盘，性能低\nredis是写入内存，高性能\nMongoDB是先写入内存，然后持久化到硬盘")]),v._v(" "),_("p",[v._v("关系型数据库和非关系型数据库"),_("br"),v._v("\n1、数据存储方式不同：关系数据库为表格形式，非关系数据库为文档或图结构")]),v._v(" "),_("p",[v._v("2、扩展方式不同：关系数据库可纵向扩展，可提高处理能力，非关系数据库为天然分布式，通过更多的数据服务器来分担负载")]),v._v(" "),_("p",[v._v("3、事务处理支持不同：关系数据库善于处理事务原子性细粒度控制，方便事务回滚，非关系数据库着重于处理大数据。")]),v._v(" "),_("p",[v._v("app\nadb命令\nadb install/uninstall\nadb logcat\nadb shell monkey\nadb shell dumpsys batterystats | grep packagename\nadb shell dumsys meminfo\nadb shell dumsys cupinfo\nadb shell dumsys gfxinfo")]),v._v(" "),_("p",[v._v("明天准备专项测试\napp专项\n自动化专项，接口（登录，发送测试接口请求，请求带上获取的cookie，获取返回值，对返回值进行断言，包括sql查询验证）\n配置文件：")]),v._v(" "),_("ol",[_("li",[v._v("登录的cookie")]),v._v(" "),_("li")]),v._v(" "),_("p",[v._v("性能测试也看一下\n再记下项目\nrpc es\n消息队列\nmoco开源框架的mock服务 还有JSON server  easy mock")])])}),[],!1,null,null,null);n.default=s.exports}}]);